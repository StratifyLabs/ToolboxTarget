
set(CMAKE_SYSTEM_NAME Generic)
set(CMAKE_SYSTEM_PROCESSOR arm)
set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM BOTH)
set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)

set(TOOLCHAIN_BIN_DIR "${TARGET_TOOLCHAIN_DIR}/bin" CACHE INTERNAL "GCC TOOLCHAIN BINARY DIR")
set(TOOLCHAIN_INC_DIR "${TARGET_TOOLCHAIN_DIR}/${TARGET_TOOLCHAIN_HOST_PREFIX}/include" CACHE INTERNAL "GCC TOOLCHAIN INCLUDE DIR")
set(TOOLCHAIN_LIB_DIR "${TARGET_TOOLCHAIN_DIR}/${TARGET_TOOLCHAIN_HOST_PREFIX}/lib" CACHE INTERNAL "GCC TOOLCHAIN LIBRARY DIR")

set(CMAKE_TRY_COMPILE_TARGET_TYPE STATIC_LIBRARY)
set(CMAKE_C_COMPILER ${TOOLCHAIN_BIN_DIR}/${TARGET_TOOLCHAIN_HOST_PREFIX}gcc${TOOLCHAIN_EXEC_SUFFIX} CACHE INTERNAL "GCC TOOLCHAIN C COMPILER")
set(CMAKE_CXX_COMPILER ${TOOLCHAIN_BIN_DIR}/${TARGET_TOOLCHAIN_HOST_PREFIX}g++${TOOLCHAIN_EXEC_SUFFIX} CACHE INTERNAL "GCC TOOLCHAIN C++ COMPILER")
set(CMAKE_ASM_COMPILER ${TOOLCHAIN_BIN_DIR}/${TARGET_TOOLCHAIN_HOST_PREFIX}g++${TOOLCHAIN_EXEC_SUFFIX} CACHE INTERNAL "GCC TOOLCHAIN ASM COMPILER")
set(CMAKE_AR ${TOOLCHAIN_BIN_DIR}/${TARGET_TOOLCHAIN_HOST_PREFIX}gcc-ar${TOOLCHAIN_EXEC_SUFFIX} CACHE INTERNAL "GCC TOOLCHAIN AR")
set(CMAKE_RANLIB ${TOOLCHAIN_BIN_DIR}/${TARGET_TOOLCHAIN_HOST_PREFIX}gcc-ranlib${TOOLCHAIN_EXEC_SUFFIX} CACHE INTERNAL "GCC TOOLCHAIN RANLIB")
set(CMAKE_NM ${TOOLCHAIN_BIN_DIR}/${TARGET_TOOLCHAIN_HOST_PREFIX}gcc-nm${TOOLCHAIN_EXEC_SUFFIX} CACHE INTERNAL "GCC TOOLCHAIN NM")
set(CMAKE_OBJCOPY ${TOOLCHAIN_BIN_DIR}/${TARGET_TOOLCHAIN_HOST_PREFIX}objcopy${TOOLCHAIN_EXEC_SUFFIX} CACHE INTERNAL "GCC TOOLCHAIN OBJCOPY")
set(CMAKE_OBJDUMP ${TOOLCHAIN_BIN_DIR}/${TARGET_TOOLCHAIN_HOST_PREFIX}objdump${TOOLCHAIN_EXEC_SUFFIX} CACHE INTERNAL "GCC TOOLCHAIN OBJDUMP")
set(CMAKE_SIZE ${TOOLCHAIN_BIN_DIR}/${TARGET_TOOLCHAIN_HOST_PREFIX}size${TOOLCHAIN_EXEC_SUFFIX} CACHE INTERNAL "GCC TOOLCHAIN SIZE")
set(CMAKE_INSTALL_PREFIX ${TOOLCHAIN_DIR}/${TARGET_TOOLCHAIN_HOST_PREFIX} CACHE INTERNAL "GCC TOOLCHAIN INSTALL PREFIX")

set(TARGET_BUILD_FLAGS "" CACHE STRING "Additional C Flags for building a target")
set(TARGET_BUILD_C_FLAGS "-Wall -mthumb -ffunction-sections -fdata-sections -fomit-frame-pointer" CACHE STRING "C Flags for building (must be overriden using the command line)")
set(TARGET_BUILD_ASM_FLAGS "-mthumb" CACHE STRING "ASM build flags")

set(CMAKE_C_FLAGS "${TARGET_BUILD_C_FLAGS}" CACHE INTERNAL "CMAKE C FLAGS BSP")
set(CMAKE_ASM_FLAGS "${TOOLCHAIN_ASM_FLAGS}" CACHE INTERNAL "CMAKE ASM FLAGS BSP")

set(TARGET_BUILD_FLOAT_OPTIONS_V7M -march=armv7-m -DARM_MATH_CM3=1)
set(TARGET_BUILD_FLOAT_OPTIONS_V7EM -march=armv7e-m -DARM_MATH_CM4=1)
set(TARGET_BUILD_FLOAT_OPTIONS_V7EM_F4SS -march=armv7e-m -mfloat-abi=soft -mfpu=fpv4-sp-d16 -U__SOFTFP__ -D__FPU_PRESENT=1 -DARM_MATH_CM4=1)
set(TARGET_BUILD_FLOAT_OPTIONS_V7EM_F4SH -march=armv7e-m -mfloat-abi=hard -mfpu=fpv4-sp-d16 -U__SOFTFP__ -D__FPU_PRESENT=1 -DARM_MATH_CM4=1)
set(TARGET_BUILD_FLOAT_OPTIONS_V7EM_F5SS -march=armv7e-m -mfloat-abi=soft -mfpu=fpv4-sp-d16 -U__SOFTFP__ -D__FPU_PRESENT=1 -DARM_MATH_CM4=1)
set(TARGET_BUILD_FLOAT_OPTIONS_V7EM_F5SH -march=armv7e-m -mfloat-abi=hard -mfpu=fpv4-sp-d16 -U__SOFTFP__ -D__FPU_PRESENT=1 -DARM_MATH_CM4=1)
set(TARGET_BUILD_FLOAT_OPTIONS_V7EM_F5DS -march=armv7e-m -mfloat-abi=soft -mfpu=fpv5-d16 -U__SOFTFP__ -D__FPU_PRESENT=1 -DARM_MATH_CM7=1)
set(TARGET_BUILD_FLOAT_OPTIONS_V7EM_F5DH -march=armv7e-m -mfloat-abi=hard -mfpu=fpv5-d16 -U__SOFTFP__ -D__FPU_PRESENT=1 -DARM_MATH_CM7=1)

set(TARGET_BUILD_FLOAT_DIR_V7M ".")
set(TARGET_BUILD_FLOAT_DIR_V7EM ".")

string(COMPARE EQUAL "${CMAKE_C_COMPILER_VERSION}" 9.3.1 IS_GCC_9)
string(COMPARE EQUAL "${CMAKE_C_COMPILER_VERSION}" 8.3.1 IS_GCC_8)
if(IS_GCC_9 OR IS_GCC_8)
	set(TARGET_BUILD_FLOAT_DIR_V7EM_F4SS "softfp") #single precision soft ABI
	set(TARGET_BUILD_FLOAT_DIR_V7EM_F4SH "hard")   #single precision hard ABI
	set(TARGET_BUILD_FLOAT_DIR_V7EM_F5SS "softfp") #single precision soft ABI
	set(TARGET_BUILD_FLOAT_DIR_V7EM_F5SH "hard")   #single precision hard ABI
	set(TARGET_BUILD_FLOAT_DIR_V7EM_F5DS "softfp")    #double precision soft ABI
	set(TARGET_BUILD_FLOAT_DIR_V7EM_F5DH "hard")      #double precision hard ABI
	set(TARGET_BUILD_INSTALL_DIR_V7M "thumb/v7-m/nofp")
	set(TARGET_BUILD_INSTALL_DIR_V7EM "thumb/v7e-m/nofp")
	set(TARGET_BUILD_INSTALL_DIR_V7EM_DP "thumb/v7e-m+dp")
	set(TARGET_BUILD_INSTALL_DIR_V7EM_FP "thumb/v7e-m+fp")
else()
	set(TARGET_BUILD_FLOAT_DIR_V7EM_F4SS "fpv4-sp/softfp") #single precision soft ABI
	set(TARGET_BUILD_FLOAT_DIR_V7EM_F4SH "fpv4-sp/hard")   #single precision hard ABI
	set(TARGET_BUILD_FLOAT_DIR_V7EM_F5SS "fpv5-sp/softfp") #single precision soft ABI
	set(TARGET_BUILD_FLOAT_DIR_V7EM_F5SH "fpv5-sp/hard")   #single precision hard ABI
	set(TARGET_BUILD_FLOAT_DIR_V7EM_F5DS "fpv5/softfp")    #double precision soft ABI
	set(TARGET_BUILD_FLOAT_DIR_V7EM_F5DH "fpv5/hard")      #double precision hard ABI
	set(TARGET_BUILD_INSTALL_DIR_V7M "thumb/v7-m")         #thumb ARMV7M
	set(TARGET_BUILD_INSTALL_DIR_V7EM "thumb/v7e-m")       #thumb ARMV7EM
	set(TARGET_BUILD_INSTALL_DIR_V7EM_DP "thumb/v7e-m")       #thumb ARMV7EM
	set(TARGET_BUILD_INSTALL_DIR_V7EM_FP "thumb/v7e-m")       #thumb ARMV7EM
endif()



string(COMPARE EQUAL "${TARGET_ARCH}" v7m IS_V7M)
string(COMPARE EQUAL "${TARGET_ARCH}" v7em IS_V7EM)
string(COMPARE EQUAL "${TARGET_ARCH}" v7em_f4ss IS_V7EM_F4SS)
string(COMPARE EQUAL "${TARGET_ARCH}" v7em_f4sh IS_V7EM_F4SH)
string(COMPARE EQUAL "${TARGET_ARCH}" v7em_f5ss IS_V7EM_F5SS)
string(COMPARE EQUAL "${TARGET_ARCH}" v7em_f5sh IS_V7EM_F5SH)
string(COMPARE EQUAL "${TARGET_ARCH}" v7em_f5ds IS_V7EM_F5DS)
string(COMPARE EQUAL "${TARGET_ARCH}" v7em_f5dh IS_V7EM_F5DH)

set(IS_NOT_LINK 1)

if(IS_V7M) #armv7m soft float
	set(TARGET_BUILD_INSTALL_DIR ${TARGET_BUILD_INSTALL_DIR_V7M})
	set(TARGET_BUILD_FLOAT_DIR ${TARGET_BUILD_FLOAT_DIR_V7M})
	set(TARGET_BUILD_FLOAT_OPTIONS ${TARGET_BUILD_FLOAT_OPTIONS_V7M})
	set(TARGET_BUILD_GCC_LIB gcc)
elseif(IS_V7EM) #armv7em soft float
	set(TARGET_BUILD_INSTALL_DIR ${TARGET_BUILD_INSTALL_DIR_V7EM})
	set(TARGET_BUILD_FLOAT_DIR ${TARGET_BUILD_FLOAT_DIR_V7EM})
	set(TARGET_BUILD_FLOAT_OPTIONS ${TARGET_BUILD_FLOAT_OPTIONS_V7EM})
	set(TARGET_BUILD_GCC_LIB gcc)
elseif(IS_V7EM_F4SS) #armv7em fpu4 single precision soft abi
	set(TARGET_BUILD_INSTALL_DIR ${TARGET_BUILD_INSTALL_DIR_V7EM_FP})
	set(TARGET_BUILD_FLOAT_DIR ${TARGET_BUILD_FLOAT_DIR_V7EM_F4SS})
	set(TARGET_BUILD_FLOAT_OPTIONS ${TARGET_BUILD_FLOAT_OPTIONS_V7EM_F4SS})
	set(TARGET_BUILD_GCC_LIB gcc)
elseif(IS_V7EM_F4SH) #armv7em fpu4 single precision hard abi
	set(TARGET_BUILD_INSTALL_DIR ${TARGET_BUILD_INSTALL_DIR_V7EM_FP})
	set(TARGET_BUILD_FLOAT_DIR ${TARGET_BUILD_FLOAT_DIR_V7EM_F4SH})
	set(TARGET_BUILD_FLOAT_OPTIONS ${TARGET_BUILD_FLOAT_OPTIONS_V7EM_F4SH})
	set(TARGET_BUILD_GCC_LIB gcc-hard)
elseif(IS_V7EM_F5SS) #armv7em fpu5 single precision soft abi
	set(TARGET_BUILD_INSTALL_DIR ${TARGET_BUILD_INSTALL_DIR_V7EM_FP})
	set(TARGET_BUILD_FLOAT_DIR ${TARGET_BUILD_FLOAT_DIR_V7EM_F5SS})
	set(TARGET_BUILD_FLOAT_OPTIONS ${TARGET_BUILD_FLOAT_OPTIONS_V7EM_F5SS})
	set(TARGET_BUILD_GCC_LIB gcc)
elseif(IS_V7EM_F5SH) #armv7em fpu5 single precision hard abi
	set(TARGET_BUILD_INSTALL_DIR ${TARGET_BUILD_INSTALL_DIR_V7EM_FP})
	set(TARGET_BUILD_FLOAT_DIR ${TARGET_BUILD_FLOAT_DIR_V7EM_F5SH})
	set(TARGET_BUILD_FLOAT_OPTIONS ${TARGET_BUILD_FLOAT_OPTIONS_V7EM_F5SH})
	set(TARGET_BUILD_GCC_LIB gcc-hard)
elseif(IS_V7EM_F5DS) #armv7em fpu5 double precision soft abi
	set(TARGET_BUILD_INSTALL_DIR ${TARGET_BUILD_INSTALL_DIR_V7EM_DP})
	set(TARGET_BUILD_FLOAT_DIR ${TARGET_BUILD_FLOAT_DIR_V7EM_F5DS})
	set(TARGET_BUILD_FLOAT_OPTIONS ${TARGET_BUILD_FLOAT_OPTIONS_V7EM_F5DS})
	set(TARGET_BUILD_GCC_LIB gcc)
elseif(IS_V7EM_F5DH) #armv7em fpu5 double precision hard abi
	set(TARGET_BUILD_INSTALL_DIR ${TARGET_BUILD_INSTALL_DIR_V7EM_DP})
	set(TARGET_BUILD_FLOAT_DIR ${TARGET_BUILD_FLOAT_DIR_V7EM_F5DH})
	set(TARGET_BUILD_FLOAT_OPTIONS ${TARGET_BUILD_FLOAT_OPTIONS_V7EM_F5DH})
	set(TARGET_BUILD_GCC_LIB gcc-hard)
elseif( TARGET_ARCH STREQUAL link )
	set(TARGET_BUILD_INSTALL_DIR ".")
	set(TARGET_BUILD_FLOAT_DIR ".")
	set(TARGET_BUILD_FLOAT_OPTIONS "")
	set(IS_NOT_LINK 0)
endif()

